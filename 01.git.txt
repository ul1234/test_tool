ssh-keygen -t rsa -C "your_email@youremail.com"

ssh -T git@github.com

git config --global user.name "your name"
git config --global user.email "your_email@youremail.com"

git config --global alias.lg "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"


git init

git remote add origin https://*.git

git remote add origin ssh://git@github.com/username/repo.git
git remote add origin ssh://git@github.com/ul1234/jd.git

git clone username@host:/path/to/repository

git add <filename>

git add *

git commit -m "comments"


git push origin master

git checkout -b feature_x

git checkout master

// delete branch
git branch -d feature_x

git push origin <branch>

git pull
git merge <branch>

git add <filename>
git diff <source_branch> <target_branch>


git fetch origin
git reset --hard origin/master

git config --global diff.external <diff-tool-name>

git config --global --unset diff.external

git config --global --unset diff

git remote add upstream https://..../.git
git remote -v

git checkout -- JDPackage/spider.pyc

强制删除某个文件和他的历史记录
git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch path-to-your-remove-file' --prune-empty --tag-name-filter cat -- --all
git push origin master --force

git reflog
 
# work on some code
git stash
git checkout correct-branch
git stash pop


git checkout -b <new-branch>

# keep github fork updated
git remote add upstream https://github.com/whoever/whatever.git

git fetch upstream

git checkout master

git rebase upstream/master

git push -f origin master


Your working tree is what is actually in the files that you are currently working on. 
HEAD is a pointer to the branch or commit that you last checked out, and which will be the parent of a new commit if you make it. 
For instance, if you're on the master branch, then HEAD will point to master, and when you commit, 
that new commit will be a descendent of the revision that master pointed to, and master will be updated to point to the new commit.

The index is a staging area where the new commit is prepared. 
Essentially, the contents of the index are what will go into the new commit 
(though if you do git commit -a, this will automatically add all changes to files that Git knows about to the index before committing, 
so it will commit the current contents of your working tree). git add will add or update files from the working tree into your index.